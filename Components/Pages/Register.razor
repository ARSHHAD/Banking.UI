@page "/register"
@using Banking.Domain.Models.ViewModels
@using Banking.UI.Services
@inject IUserService _userService


<div class="container d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="row w-100">
        <div class="col-md-4 mx-auto">

            <div class="text-center mb-4 ">
                <h4 class="display-4 text-wrap mt-2">Register</h4> 
            </div>

            @if (isSuccess)
            {
                <div class="alert alert-success">
                    Registration successful! You can now <a href="/login">login</a>.
                </div>
            }

            @if (isError)
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <EditForm Model="registerModel" OnValidSubmit="HandleRegister">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group p-0">
                    <label for="username">Username</label>
                    <InputText id="username" class="form-control" @bind-Value="registerModel.Username" />
                </div>

                <div class="form-group  p-0">
                    <label for="email">Email</label>
                    <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
                </div>

                <div class="form-group  p-0">
                    <label for="dob">Date of Birth</label>
                    <InputDate id="dob" class="form-control" @bind-Value="registerModel.DateOfBirth" />
                </div>

                <div class="form-group  p-0">
                    <label for="password">Password</label>
                    <InputText id="password" class="form-control" type="password" @bind-Value="registerModel.Password" />
                </div>

                <div class="form-group  p-0">
                    <label for="confirmPassword">Confirm Password</label>
                    <InputText id="confirmPassword" class="form-control" type="password" @bind-Value="registerModel.ConfirmPassword" />
                    @if (!string.IsNullOrEmpty(passwordMismatchMessage))
                    {
                        <div class="text-danger">@passwordMismatchMessage</div>
                    }
                </div>

                <div class="d-flex justify-content-center p-2">
                    <button type="submit" class="btn btn-primary">Register</button>
                </div>

            </EditForm>

            <p>
                Already have an account? <a href="/login">Login</a>
            </p>

        </div>
    </div>
</div>


@code {
    [Inject] private NavigationManager NavigationManager { get; set; }

    private RegisterModel registerModel = new RegisterModel();
    private string passwordMismatchMessage = string.Empty;
    private string errorMessage = string.Empty;
    private bool isSuccess = false;
    private bool isError = false;

    private async Task HandleRegister()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            passwordMismatchMessage = "Passwords do not match!";
            return;
        }

        var response = await _userService.RegisterUser(registerModel);

        if (response.Success)
        {
            isSuccess = true;
            await Task.Delay(2500);
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            isError = true;
            errorMessage = response.Message;
        }
    }

}
